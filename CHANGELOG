EventQL v0.5.0 beta;

  * Changed the DESCRIBE TABLE statement to return a new "encoding" column that
    contains information about the column's encoding settings

  * Added a new monitor thread that publishes disk usage and other load
    information to the coordination service

  * Added new frames to native protocol: ACK, INSERT, REPL_INSERT


EventQL v0.4.0 beta;

  * Changed the parallel GROUP BY operation to use the new native protocol and
    to schedule all remote partial group bys from a a single thread using
    asynchronous I/O (currently via poll()).

  * Changed the evql client to use the new native protocol

  * Changed the connection acceptor code to read the first byte of an incoming
    connection and switch protocols (currently HTTP and native) based on this
    first byte

  * Changed the http server code to execute incoming requests from within a
    database thread (previously this was a generic thread pool)

  * Changed the internal cluster auth to require all internal hosts to be
    whitelisted using the cluster.allowed_hosts option. In standalone mode,
    the whitelist is defaulted to 0.0.0.0/0

  * Changed the HTTP transport to run fully within the database thread (i.e.
    removed the dependency on an external event loop) and added http timeouts

  * Changed the SQL engine to use the new native transport

  * Changed the zookeeper backend to explicitly reconnect on session timeouts
    and not rely on the built-in reconnect mechanism

  * Removed the obsolete "sha1_tokens" field from the cluster/server config

  * Removed the PCRE dependency

  * Added a native transport layer (a framed TCP-based protocol). See
    doc/internals/protocol.txt for the specification

  * Added a c client driver library (libevqlclient)

  * Added a new table config option that allows to set a finite partition size
    (called a "partition size hint" in the user facing documentation). A table
    with a finite partition size will initially have zero partitions but
    instead add (finite) partitions as it receives inserts for the respective
    chunks of the keyspace (without splitting the new partition from a larger
    partition)

  * Added the DROP TABLE statement

  * Added a thread-local storage and retrieval mechanism for the current
    session. This also adds a new requirement that all operations must be
    executed from within a valid database thread.

  * Added support for loading configuration files using the '-c' flag and for
    setting/overring individual configuration parameters using the '-C' flags
    in the EventQL client (evql) binary

  * Added the following new configuration options: server.c2s_io_timeout,
    server.c2s_idle_timeout, server.s2s_io_timeout, server.s2s_idle_timeout,
    server.heartbeat_interval, cluster.allowed_hosts, server.http_io_timeout,
    server.query_progress_rate_limit, cluster.allow_anonymous,
    cluster.allow_drop_table, server.query_max_concurrent_shards,
    server.query_max_concurrent_shards_per_host,
    server.query_failed_shard_policy, client.timeout


EventQL v0.3.2 (v0.3.2, gitb0ea6bc) beta; 2016-09-13 15:23:08 +0000

  * Fixed a bug in the eventql client (evql) where missing HOME and USER
    env variables would lead to an assertion on some libc++ implementations

  * Added the client.history_file and client.history_maxlen options to the
    eventql client (evql)


EventQL v0.3.1 (v0.3.1, git2da7f66) beta; 2016-09-04 16:11:19 +0000

  * Fixed a bug in the standalone backend where any ALTER TABLE statements
    would fail with "table already exists"

  * Changed the mapreduce reduce shard allocation so that (in most cases)
    repeated executions of the same job will result in (unchanged) reduce
    shards being scheduled on the same machines as before to improve cache
    hit rates.

  * Changed the default policy for handling failed mapreduce shards from ERROR
    (return an error to the user) to IGNORE (ignore the missing shard and
    continue without it)

  * Changed kDefaultMaxConcurrentTasks (the default maximum number of threads
    to be started for a single sql query) from 32 to 64

  * Added a new execution step to the mapreduce scheduler where, before running
    a given map task on any of the candidate servers, we try to retrieve it
    from cache on each of the candidate servers (and bail early if we find it).

  * Added verbose debug-logging to the MapReduce scheduler.

  * Added many documentation improvements, dockerfiles, examples, etc


EventQL v0.3.0 (v0.3.0-rc0, gita2fa235) beta; 2016-07-25 22:53:29 +0000

  * Renamed the project to EventQL (the previous name was ZenDB Z1)

  * Removed the old web interface and all non-core services such as the logfile
    service

  * Changed the sql query execution code to use and return result cursors (as
    opposed to non-interruptable result streams)


v0.2.4 (2016-02-24)
===================
  - improved SValue interface and numeric/time handling
  - new functions: now(), z1_version()

v0.2.3 (2016-02-04)
===================
  - MR: support column projection in mapreduces
  - BUG: fix minor bugs in constant folding and constraint resolution

v0.2.2 (2015-12-30)
===================
  - CORE: select TSDB partitions from tablescan constraints (deprecates .lastNdays)
  - SQL: implemented JOIN
  - SQL: implemented table subqueries
  - SQL: implemented constant folding
  - SQL: implemented scan constraint extraction
  - SQL: improved column name resolution and group by select list rewriting
  - SQL: implemented WHERE pushdown (predicate pruning/rewriting)
  - SQL: implemented to_{string,int,float,bool} conversion functions
  - SQL: implemented time_at function
  - WEBUI: new table management UI

v0.2.1 (2015-12-16)
===================
  - CORE: removed COLSM v0.2.0 upgrade code
  - API: drilldown query API
  - API: metrics support
  - API: http/mapreduce error handling improvements
  - API: javascript utf8 fixes
  - WEBUI: stats on /zstatus/

v0.2.0 (2015-12-09)
===================
  - CORE: upgrade to COLSM v0.2.0 storage engine (enables true LSM with UPDATEs)
  - WEBUI: UI fixes

v0.1.2 (2015-12-06)
===================
  - CORE: TimeWindowPartitioner::partitionKeysFor one-off fix
  - WEBUI: UI refresh

v0.1.1 (2015-12-04)
===================
  - CORE: z1d daemonization

v0.1.0 (2015-11-26)
===================
  - CORE: timeseries and static partitioned tables
  - CORE: DHT based replication and sharding
  - CORE: COLSM v0.1.0 storage (append only)
  - CORE: basic zmaster
  - SQL: basic SQL engine
  - API: basic javascript (spidermonkey) integration, MR framework
  - API: basic HTTP API
  - WEBUI: sql editor, table management UI
